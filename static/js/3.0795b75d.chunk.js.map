{"version":3,"sources":["components/Profile/ProfileInfo/ProfileStatusWhithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","onBlur","updateUserStatus","type","autoFocus","onDoubleClick","className","ProfileInfo","profile","alt","src","photos","small","fullName","aboutMe","contacts","facebook","vk","twitter","instagram","github","lookingForAJob","lookingForAJobDescription","Preloader","Post","message","likeCount","maxLength10","maxLengthCreator","AddPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","name","validate","required","MyPosts","postsElements","posts","reverse","map","p","i","postText","likesCount","key","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","getUserProfile","getUserStatus","React","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.0795b75d.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\"\r\nimport \"./ProfileInfo.css\"\r\n\r\nconst ProfileStatusWithHooks = (props) =>  {\r\n\r\n    let [editMode, setEditMode] = useState(false);// возвращает массив, значение + функция\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n        //[props.status] - зависимость , каждый раз отрисовывается при изменении props.status\r\n    }, [props.status]); // [] - выполнится 1 раз когда отрисуется компонента,\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    };\r\n\r\n    const deactivateEditMode = () =>  {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status);\r\n    };\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n             {!editMode\r\n                 ? <div>\r\n                    <span onDoubleClick={activateEditMode} className={\"userStatus\"}  >{props.status || \"some status\"}</span>\r\n                 </div>\r\n                 : <div>\r\n                    <input onChange={onStatusChange} onBlur={deactivateEditMode} type=\"text\" value={status} autoFocus={true}/>\r\n                 </div>\r\n             }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport './ProfileInfo.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\n// import ProfileStatus from \"./ProfileStatus\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWhithHooks\";\r\n\r\n\r\nconst ProfileInfo = ({profile, status, updateUserStatus, ...props}) => {\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"userInfo\">\r\n                <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus}/>\r\n                <div className=\"userContact\">\r\n                    <div>\r\n                        <img className=\"userLogo\"  alt=\"logo\" src={profile.photos.small\r\n                            ? profile.photos.small\r\n                            : 'https://picsum.photos/id/509/200/200'} />\r\n                        <p>Name: {profile.fullName}</p>\r\n                        <p>{profile.aboutMe}</p>\r\n                    </div>\r\n\r\n                    {/*сделать что бы MAPилось*/}\r\n                    <ul className=\"userContact-list\">\r\n                        <li>{profile.contacts.facebook}</li>\r\n                        <li>{profile.contacts.vk}</li>\r\n                        <li>{profile.contacts.twitter}</li>\r\n                        <li>{profile.contacts.instagram}</li>\r\n                        <li>{profile.contacts.github}</li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <div className=\"userDescription\">\r\n                    {profile.lookingForAJob && <p>{profile.lookingForAJobDescription}</p>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport './Post.css'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className=\"item\">\r\n            <img className=\"userAva\" src=\"https://picsum.photos/id/509/200/200\" alt=\"userAva\"/>\r\n            <p>\r\n                {props.message}\r\n            </p>\r\n            <span className=\"likeCount\">\r\n               Likes {props.likeCount}\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport './MyPosts.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControl/FormsControl\";\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className=\"addPost\">\r\n            <div>\r\n                <Field component={Textarea} placeholder=\"Enter your post message\"\r\n                       name=\"newPostText\" validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddPostFormRedux = reduxForm({\r\n    form: \"profileAddMessageForm\"\r\n})(AddNewPostForm);\r\n\r\n\r\nfunction MyPosts(props) {\r\n    let postsElements = [...props.posts].reverse().map((p, i) =>\r\n        <Post message={p.postText} likeCount={p.likesCount} key={i}/>);\r\n\r\n    let addNewPost = (values) => {\r\n        props.addPost(values.newPostText)\r\n    };\r\n\r\n    return (\r\n        <div className=\"posts\">\r\n            <h3>My posts</h3>\r\n\r\n            <AddPostFormRedux onSubmit={addNewPost}/>\r\n\r\n            <div className=\"postsList\">\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPosts;","// import React from 'react';\r\nimport {addPostCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText,\r\n    }\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch( addPostCreator(newPostText) )\r\n        },\r\n    }\r\n};\r\n\r\nconst MyPostsContainer = connect( mapStateToProps,mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport './Profile.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n          <ProfileInfo profile={props.profile} status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n          <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getUserStatus, updateUserStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\n// import {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport Login from \"../Login/Login\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId; // взятие Id User при нажатии на Icon в Users Page\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n        this.props.getUserProfile(userId); // вывод информации о User в Profile\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateUserStatus={this.props.updateUserStatus}/>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps , {getUserProfile, getUserStatus, updateUserStatus}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer);"],"sourceRoot":""}